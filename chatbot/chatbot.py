# -*- coding: utf-8 -*-
"""new.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JH599yawkEC5I-SUvuHE_N-zDQEOSg2t
"""

! pip install chatterbot
! pip install chatterbot_corpus

pip install newspaper3k

pip install --user -U nltk

"""Import Libraries"""

from chatterbot import ChatBot
from chatterbot.trainers import ListTrainer
# not used

import nltk
nltk.download('punkt')
nltk.download('wordnet')
import numpy as np
import random
import string
import bs4 as bs
import requests, json
import urllib.request
import re
import random

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity


import warnings
warnings.filterwarnings("ignore")

import click

"""Specifying the target for additional knowledge"""

raw_html = urllib.request.urlopen('https://en.wikipedia.org/wiki/Weather')
raw_html = raw_html.read()

article_html = bs.BeautifulSoup(raw_html, 'lxml')

article_paragraphs = article_html.find_all('p')

article_text = ''

for para in article_paragraphs:
    article_text += para.text

article_text = article_text.lower()

article_text

article_text = re.sub(r'\[[0-9]*\]', ' ', article_text)
article_text = re.sub(r'\s+', ' ', article_text)

#Throws an error and I am not sure why

article_sentences = nltk.sent_tokenize(article_text)
article_words = nltk.word_tokenize(article_text)

wnlemmatizer = nltk.stem.WordNetLemmatizer()

def perform_lemmatization(tokens):
    return [wnlemmatizer.lemmatize(token) for token in tokens]

punctuation_removal = dict((ord(punctuation), None) for punctuation in string.punctuation)

def get_processed_text(document):
    return perform_lemmatization(nltk.word_tokenize(document.lower().translate(punctuation_removal)))

greeting_inputs = ("hey", "good morning", "good evening", "morning", "evening", "hi", "whatsup","hello","yo","what it do","what it is","wa up","sup")
greeting_responses = ["hey", "hey hows you?", "*nods* Sup?", "hello, how you doing", "hello", "Welcome, I am good and you"]

def generate_greeting_response(greeting):
    for token in greeting.split():
        if token.lower() in greeting_inputs:
            return random.choice(greeting_responses)

def generate_response(user_input):
    weatherrobo_response = ''
    article_sentences.append(user_input)

    word_vectorizer = TfidfVectorizer(tokenizer=get_processed_text, stop_words='english')
    all_word_vectors = word_vectorizer.fit_transform(article_sentences)
    similar_vector_values = cosine_similarity(all_word_vectors[-1], all_word_vectors)
    similar_sentence_number = similar_vector_values.argsort()[0][-2]

    matched_vector = similar_vector_values.flatten()
    matched_vector.sort()
    vector_matched = matched_vector[-2]

    if vector_matched == 0:
        weatherrobo_response = weatherrobo_response + "I am sorry, but what does that have to do with what we are talking about?"
        return weatherrobo_response
    else:
        weatherrobo_response = weatherrobo_response + article_sentences[similar_sentence_number]
        return weatherrobo_response

#should have some custom stop words here
word_vectorizer = TfidfVectorizer(tokenizer=get_processed_text, stop_words='english')
all_word_vectors = word_vectorizer.fit_transform(article_sentences)

similar_vector_values = cosine_similarity(all_word_vectors[-1], all_word_vectors)
similar_vector_values

similar_sentence_number = similar_vector_values.argsort()[0][-2]
similar_sentence_number

"""Connecting to Weather API to get weather for local information"""

BASE_URL = "https://api.openweathermap.org/data/2.5/weather?"
BASE_URL = "https://api.openweathermap.org/data/2.5/weather?"
CITY = "New York"
API_KEY = "80500bda3ab49ea41fa2c4e3b7afa84a"


URL = BASE_URL + "q=" + CITY +"&units=imperial"+"&appid=" + API_KEY
response = requests.get(URL)
if response.status_code == 200:
   data = response.json()
   main = data['main']
   temperature = main['temp']
   humidity = main['humidity']
   pressure = main['pressure']
   report = data['weather']
   print(f"{CITY:}")
   print(f"Temperature: {temperature}")
   print(f"Humidity: {humidity}")
   print(f"Pressure: {pressure}")
   print(f"Weather Report: {report[0]['description']}")
else:
   # showing the error message
   print("Error in the HTTP request")

tempy=str(round(temperature,0))

random_question = [' What kind of weather is best for a cookout? ', ' When is too cold to wear shorts? ',
                   ' Have you ever gotten drunk? ',' What is the weather outside like to you?',
                   ' What is your ideal weather like? ']

random_question_selection3=random.sample(random_question,1)

question=random_question_selection3[0]

"""Chat Bot itself"""

#Hello message

choices={'Sunny':1,'Rainy':2 }
choice = click.prompt('What would you rather have?', type=click.Choice(choices, case_sensitive=False))
print(f'That is great! I like them both because well I am a machine...I am not sure what I would like if I was a human. I have another question for you!')

print(f"Bot: Have you been outside Today is {report[0]['description']} and it is around {tempy} degrees.")
user_input1=input("What do you think of that?\n")

continue_dialogue = True
print("Hello, I am your friend. You can ask me any question regarding weather:")
while(continue_dialogue == True):
    human_text = input()
    human_text = human_text.lower()
    if human_text != 'bye':
        if human_text == 'thanks' or human_text == 'thank you very much' or human_text == 'thank you':
            continue_dialogue = False
            print(f"Bot: You are welcome go out have fun it is {str(temperature)} degrees and it is {str(report[0]['description'])} outside")
        else:
            if generate_greeting_response(human_text) != None:
                print(f"Bot: {generate_greeting_response(human_text)} Today's about {str(temperature)} degrees and it is {str(report[0]['description'])} outside")
            else:
                print("Bot: ", end="")
                print(generate_response(human_text))
                article_sentences.remove(human_text)
    else:
        continue_dialogue = False
        print("Bot: Good bye and take care of yourself...")

#good bye message





